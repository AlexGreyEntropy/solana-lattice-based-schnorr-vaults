use solana_secp256k1::CompressedPoint;

use crate::{
    challenges::{bip340::BIP340Challenge, keccak256::Keccak256Challenge, sha256::Sha256Challenge},
    Secp256k1SchnorrSignature, SECP256K1_SCHNORR_SIGNATURE_LENGTH,
};

#[test]
fn test_signature_verification_bip340() {
    let signature: [u8; SECP256K1_SCHNORR_SIGNATURE_LENGTH] = [
        0xbb, 0x83, 0xe8, 0xb3, 0x48, 0xf6, 0xbe, 0xa3, 0x9e, 0x97, 0x33, 0xc5, 0x29, 0xcd, 0x9c,
        0x1c, 0x8c, 0x64, 0x85, 0xb7, 0xc7, 0x6b, 0x80, 0xb9, 0x73, 0x88, 0xb3, 0xe1, 0xc2, 0xe2,
        0x36, 0x39, 0x2a, 0x94, 0xb3, 0x14, 0x5b, 0x98, 0xa7, 0x92, 0x15, 0x60, 0x8f, 0xa3, 0x61,
        0x08, 0x4a, 0xea, 0xd1, 0xec, 0x08, 0x09, 0xe9, 0x86, 0xb9, 0xe5, 0xb4, 0x01, 0xff, 0xff,
        0x10, 0xe7, 0x12, 0x65,
    ];
    let message = *b"test";
    let pubkey = CompressedPoint([
        0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87,
        0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16,
        0xf8, 0x17, 0x98,
    ]);

    let schnorr_signature = Secp256k1SchnorrSignature(signature);

    schnorr_signature
        .verify::<BIP340Challenge, CompressedPoint>(&message, &pubkey)
        .expect("Invalid signature");
}

#[cfg_attr(feature = "keccak256", test)]
fn test_signature_verification_keccak256() {
    let signature: [u8; SECP256K1_SCHNORR_SIGNATURE_LENGTH] = [
        0xbb, 0x83, 0xe8, 0xb3, 0x48, 0xf6, 0xbe, 0xa3, 0x9e, 0x97, 0x33, 0xc5, 0x29, 0xcd, 0x9c,
        0x1c, 0x8c, 0x64, 0x85, 0xb7, 0xc7, 0x6b, 0x80, 0xb9, 0x73, 0x88, 0xb3, 0xe1, 0xc2, 0xe2,
        0x36, 0x39, 0xe9, 0xfc, 0x90, 0x8f, 0x17, 0x9e, 0x39, 0x01, 0x38, 0x7a, 0x3e, 0x93, 0xd6,
        0xa0, 0x2a, 0x40, 0xb5, 0xde, 0x72, 0x0a, 0xec, 0x80, 0xac, 0xb8, 0x92, 0xd6, 0x83, 0xbf,
        0x1e, 0x72, 0x1e, 0x2a,
    ];
    let message = *b"test";
    let pubkey = CompressedPoint([
        0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87,
        0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16,
        0xf8, 0x17, 0x98,
    ]);

    let schnorr_signature = Secp256k1SchnorrSignature(signature);

    schnorr_signature
        .verify::<Keccak256Challenge, CompressedPoint>(&message, &pubkey)
        .expect("Invalid signature");
}

#[cfg_attr(feature = "sha256", test)]
fn test_signature_verification_sha256() {
    let signature: [u8; SECP256K1_SCHNORR_SIGNATURE_LENGTH] = [
        0xbb, 0x83, 0xe8, 0xb3, 0x48, 0xf6, 0xbe, 0xa3, 0x9e, 0x97, 0x33, 0xc5, 0x29, 0xcd, 0x9c,
        0x1c, 0x8c, 0x64, 0x85, 0xb7, 0xc7, 0x6b, 0x80, 0xb9, 0x73, 0x88, 0xb3, 0xe1, 0xc2, 0xe2,
        0x36, 0x39, 0x15, 0xe6, 0x7a, 0x01, 0xaf, 0xa1, 0x9b, 0x97, 0xfd, 0xb7, 0x23, 0x0f, 0x64,
        0x2e, 0xe6, 0x98, 0x3f, 0xf1, 0xc1, 0xbe, 0x70, 0xa8, 0x66, 0x93, 0x82, 0xa1, 0x4c, 0xa3,
        0x3b, 0x63, 0x6c, 0x60,
    ];
    let message = *b"test";
    let pubkey = CompressedPoint([
        0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87,
        0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16,
        0xf8, 0x17, 0x98,
    ]);

    let schnorr_signature = Secp256k1SchnorrSignature(signature);

    schnorr_signature
        .verify::<Sha256Challenge, CompressedPoint>(&message, &pubkey)
        .expect("Invalid signature");
}
