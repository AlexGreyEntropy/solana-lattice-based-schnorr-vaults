use solana_secp256k1::CompressedPoint;

use crate::{
    challenges::{bip340::BIP340Challenge, keccak256::Keccak256Challenge, sha256::Sha256Challenge},
    Secp256k1SchnorrSignature, SECP256K1_SCHNORR_SIGNATURE_LENGTH,
};

#[test]
fn test_signature_verification_bip340() {
    let signature: [u8; SECP256K1_SCHNORR_SIGNATURE_LENGTH] = [
        0xbb, 0x83, 0xe8, 0xb3, 0x48, 0xf6, 0xbe, 0xa3, 0x9e, 0x97, 0x33, 0xc5, 0x29, 0xcd, 0x9c,
        0x1c, 0x8c, 0x64, 0x85, 0xb7, 0xc7, 0x6b, 0x80, 0xb9, 0x73, 0x88, 0xb3, 0xe1, 0xc2, 0xe2,
        0x36, 0x39, 0x2a, 0x94, 0xb3, 0x14, 0x5b, 0x98, 0xa7, 0x92, 0x15, 0x60, 0x8f, 0xa3, 0x61,
        0x08, 0x4a, 0xea, 0xd1, 0xec, 0x08, 0x09, 0xe9, 0x86, 0xb9, 0xe5, 0xb4, 0x01, 0xff, 0xff,
        0x10, 0xe7, 0x12, 0x65,
    ];

    let message = *b"test";

    let pubkey = CompressedPoint([
        0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87,
        0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16,
        0xf8, 0x17, 0x98,
    ]);

    let schnorr_signature = Secp256k1SchnorrSignature(signature);

    schnorr_signature
        .verify::<BIP340Challenge, CompressedPoint>(&message, &pubkey)
        .expect("Invalid signature");
}

#[test]
fn test_signature_generation_bip340() {
    let message = *b"test";
    let privkey = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01,
    ];

    let schnorr_signature =
        Secp256k1SchnorrSignature::sign::<BIP340Challenge>(message.as_ref(), &privkey)
            .expect("Invalid signature");
    assert_eq!(
        schnorr_signature.0,
        [
            0xbb, 0x83, 0xe8, 0xb3, 0x48, 0xf6, 0xbe, 0xa3, 0x9e, 0x97, 0x33, 0xc5, 0x29, 0xcd,
            0x9c, 0x1c, 0x8c, 0x64, 0x85, 0xb7, 0xc7, 0x6b, 0x80, 0xb9, 0x73, 0x88, 0xb3, 0xe1,
            0xc2, 0xe2, 0x36, 0x39, 0x2a, 0x94, 0xb3, 0x14, 0x5b, 0x98, 0xa7, 0x92, 0x15, 0x60,
            0x8f, 0xa3, 0x61, 0x08, 0x4a, 0xea, 0xd1, 0xec, 0x08, 0x09, 0xe9, 0x86, 0xb9, 0xe5,
            0xb4, 0x01, 0xff, 0xff, 0x10, 0xe7, 0x12, 0x65,
        ]
    );
}

#[cfg_attr(feature = "keccak256", test)]
fn test_signature_verification_keccak256() {
    let signature: [u8; SECP256K1_SCHNORR_SIGNATURE_LENGTH] = [
        0xee, 0x30, 0x11, 0xa0, 0x61, 0xf1, 0x2b, 0x5c, 0x6d, 0x14, 0xb8, 0xbc, 0x6d, 0x4b, 0xb4,
        0x77, 0x91, 0xca, 0xd9, 0x15, 0x2e, 0xb6, 0x0a, 0x7e, 0x76, 0x9f, 0x27, 0x86, 0x9f, 0xf3,
        0x89, 0xd2, 0x04, 0xa5, 0xb0, 0x61, 0x5f, 0x39, 0xc7, 0x77, 0x1a, 0x14, 0xf7, 0xce, 0x17,
        0xce, 0x8b, 0x92, 0x51, 0xfd, 0x41, 0x18, 0xd9, 0xde, 0x06, 0x37, 0xc7, 0x5c, 0x04, 0x46,
        0x09, 0xfc, 0x9c, 0x04,
    ];
    let message = *b"test";
    let pubkey = CompressedPoint([
        0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87,
        0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16,
        0xf8, 0x17, 0x98,
    ]);

    let schnorr_signature = Secp256k1SchnorrSignature(signature);

    schnorr_signature
        .verify::<Keccak256Challenge, CompressedPoint>(&message, &pubkey)
        .expect("Invalid signature");
}

#[cfg(feature = "sign")]
#[test]
fn test_signature_generation_keccak256() {
    let message = *b"test";
    let privkey = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01,
    ];

    let schnorr_signature =
        Secp256k1SchnorrSignature::sign::<Keccak256Challenge>(message.as_slice(), &privkey)
            .expect("Invalid signature");
    assert_eq!(
        schnorr_signature.0,
        [
            0xee, 0x30, 0x11, 0xa0, 0x61, 0xf1, 0x2b, 0x5c, 0x6d, 0x14, 0xb8, 0xbc, 0x6d, 0x4b,
            0xb4, 0x77, 0x91, 0xca, 0xd9, 0x15, 0x2e, 0xb6, 0x0a, 0x7e, 0x76, 0x9f, 0x27, 0x86,
            0x9f, 0xf3, 0x89, 0xd2, 0x04, 0xa5, 0xb0, 0x61, 0x5f, 0x39, 0xc7, 0x77, 0x1a, 0x14,
            0xf7, 0xce, 0x17, 0xce, 0x8b, 0x92, 0x51, 0xfd, 0x41, 0x18, 0xd9, 0xde, 0x06, 0x37,
            0xc7, 0x5c, 0x04, 0x46, 0x09, 0xfc, 0x9c, 0x04,
        ]
    );
}

#[cfg(feature = "sign")]
#[cfg_attr(feature = "sha256", test)]
fn test_signature_verification_sha256() {
    let signature: [u8; SECP256K1_SCHNORR_SIGNATURE_LENGTH] = [
        0x36, 0x4d, 0x7d, 0x6a, 0x77, 0xca, 0xe2, 0xf7, 0x88, 0x28, 0x79, 0xfe, 0x0b, 0xd5, 0x03,
        0x57, 0x03, 0x39, 0x31, 0xa8, 0x05, 0x6d, 0xa5, 0x23, 0x86, 0xcf, 0x7b, 0x16, 0x52, 0x0e,
        0xe6, 0x66, 0xf6, 0xfb, 0xac, 0xa7, 0xa4, 0xd3, 0x1b, 0xdf, 0x29, 0x3c, 0xd8, 0xe9, 0x9a,
        0x93, 0x5e, 0x0e, 0x9a, 0xf3, 0xf9, 0xdd, 0xdf, 0xef, 0xbc, 0x85, 0xf6, 0x0a, 0xb9, 0x5f,
        0x00, 0x06, 0x8a, 0x31,
    ];
    let message = *b"test";
    let pubkey = CompressedPoint([
        0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87,
        0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16,
        0xf8, 0x17, 0x98,
    ]);

    let schnorr_signature = Secp256k1SchnorrSignature(signature);

    schnorr_signature
        .verify::<Sha256Challenge, CompressedPoint>(&message, &pubkey)
        .expect("Invalid signature");
}

#[cfg(feature = "sign")]
#[test]
fn test_signature_generation_sha256() {
    let message = *b"test";
    let privkey = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01,
    ];

    let schnorr_signature =
        Secp256k1SchnorrSignature::sign::<Sha256Challenge>(message.as_slice(), &privkey)
            .expect("Invalid signature");
    assert_eq!(
        schnorr_signature.0,
        [
            0x36, 0x4d, 0x7d, 0x6a, 0x77, 0xca, 0xe2, 0xf7, 0x88, 0x28, 0x79, 0xfe, 0x0b, 0xd5,
            0x03, 0x57, 0x03, 0x39, 0x31, 0xa8, 0x05, 0x6d, 0xa5, 0x23, 0x86, 0xcf, 0x7b, 0x16,
            0x52, 0x0e, 0xe6, 0x66, 0xf6, 0xfb, 0xac, 0xa7, 0xa4, 0xd3, 0x1b, 0xdf, 0x29, 0x3c,
            0xd8, 0xe9, 0x9a, 0x93, 0x5e, 0x0e, 0x9a, 0xf3, 0xf9, 0xdd, 0xdf, 0xef, 0xbc, 0x85,
            0xf6, 0x0a, 0xb9, 0x5f, 0x00, 0x06, 0x8a, 0x31
        ]
    );
}
